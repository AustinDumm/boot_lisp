(define (zip . lists)
    (apply map list lists))

(define (map f elts . elts*)
    (if (empty? elts)
        '()
        (cons (apply f (first elts) (map first elts*))
              (apply map f (rest elts) (map rest elts*)))))

(define (reduce f elts)
    (define (reduce-impl f running elts)
        (if (empty? elts)
            running
            (reduce-impl f (f running (first elts)) (rest elts))))
    (reduce-impl f (first elts) (rest elts)))

(define (pick index items)
    (if (= index 0)
        (first items)
        (if (empty? (rest items))
            (void)
            (pick (- index 1) (rest items)))))

